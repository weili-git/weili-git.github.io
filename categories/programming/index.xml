<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Hugo tranquilpeak theme</title>
    <link>https://weili-git.github.io/categories/programming/</link>
    <description>Recent content in Programming on Hugo tranquilpeak theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Feb 2023 20:16:00 +0900</lastBuildDate><atom:link href="https://weili-git.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python knowledge</title>
      <link>https://weili-git.github.io/2023/02/python-knowledge/</link>
      <pubDate>Wed, 22 Feb 2023 20:16:00 +0900</pubDate>
      
      <guid>https://weili-git.github.io/2023/02/python-knowledge/</guid>
      <description>1. Mutable &amp;amp; Immutable In python, built-in types are classified as mutable and immutable.
immutable: tuple, string, number, bool
mutable: list, dict, set
example city_list = [&amp;#39;New York&amp;#39;, &amp;#39;London&amp;#39;, &amp;#39;Tokyo&amp;#39;] city_list.append(&amp;#39;Paris&amp;#39;) print(city_list) # [&amp;#39;New York&amp;#39;, &amp;#39;London&amp;#39;, &amp;#39;Tokyo&amp;#39;, &amp;#39;Paris&amp;#39;] tuple_a = (1, 2) tuple_a[0] = 3 # error, since tuple_a is immutable, we can&amp;#39;t modify it tuple_b = ([], 0) tuple_b[0].append(1) # success, because the address of the first element didn&amp;#39;t change print(tuple_b) # ([1], 0) Conlusion Mutable objects are often used in the situations where we want to do updates.</description>
    </item>
    
    <item>
      <title>Javascript Review</title>
      <link>https://weili-git.github.io/2022/05/javascript-review/</link>
      <pubDate>Tue, 17 May 2022 09:56:00 +0800</pubDate>
      
      <guid>https://weili-git.github.io/2022/05/javascript-review/</guid>
      <description>1. Variable var a = 5; // declare global function myfunc(){ var a = 10; // override global { let a = 5; // local // here a = 5; } // here a = 10; } // only &amp;#39;var&amp;#39; can override in the same block // var a = 10; // let a = 5; illegal statement 2. Constant const a = 5; // initial value must be assigned a = 3 // illegal statement // the atribution of constant object can be changed const b = [&amp;#34;Python&amp;#34;, &amp;#34;Java&amp;#34;, &amp;#34;C++&amp;#34;]; b[0] = &amp;#34;Ruby&amp;#34;; // legal statement // but the object itself can not be re-assigned b = [&amp;#34;C#&amp;#34;, &amp;#34;VB&amp;#34;]; // illegal statment // more example const car = {type:&amp;#34;porsche&amp;#34;, model:&amp;#34;911&amp;#34;, color:&amp;#34;Black&amp;#34;}; car.</description>
    </item>
    
  </channel>
</rss>
